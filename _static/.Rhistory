receiver_payment <- df_r$receiver_payof + 2.5
paste("Total cost of receiver component, incl Prolific: ", "Â£", round(sum(receiver_payment)*1.3333, 2), sep="")
# export IDs and payoffs
df_r$ID_payoff <- paste(df_r$Intro.1.player.ProlificID, ", ", df_r$receiver_payoff, sep = "")
receiver_payoff_df <- df_r$ID_payoff
write.csv(receiver_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/receiver payoffs.csv", row.names=F)
View(df_r)
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r$unfair
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df$Intro.1.player.ProlificID != "",] # delete non-completes
df$unfair
df_r$unfair
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r$unfair
library("janitor)")
library("janitor")
df_r[df_r$Intro.1.player.treatment == "HN"] %>% tabyl(unfair)
df_r[df_r$Intro.1.player.treatment == "HN",] %>% tabyl(unfair)
df_r[df_r$Intro.1.player.treatment == "HC",] %>% tabyl(unfair)
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
#============================#
#  Proposer Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- tail(df_r, n = 60) # this is just for bots
df_r <- df_r[c("Intro.1.player.treatment","Task.1.player.choice","Task.1.player.proposer_participant_code")]
# randomly select a unique observation per proposer
random_rows <- sample(nrow(df_r))
df_r <- df_r[random_rows,]
df_r <- (df_r[!duplicated(df_r$Task.1.player.proposer_participant_code),])
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.9*3
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.6*3
df_r$proposer_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# match to proposer data
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- tail(df_p, n = 100) # this is just for bots
#subset Prolific ID, offer and merit columns
df_p <- df_p[c("Intro.1.player.ProlificID", "Task.1.player.task_failed", "Offer.1.player.Offer","participant.code")]
names(df_p)<- c("prolific_ID", "task_failed", "offer","Task.1.player.proposer_participant_code")
# merge datasets
df_m <- merge(x = df_p, y = df_r, by = "Task.1.player.proposer_participant_code", all=T)
# replace unmatched receivers's NA payoffs with their offer
df_m$numeric_payoff[df_m$offer == "10%"] <- 0.9*3
df_m$numeric_payoff[df_m$offer == "40%"] <- 0.6*3
df_m$proposer_payoff[is.na(df_m$proposer_payoff)] <- df_m$numeric_payoff[is.na(df_m$proposer_payoff)]
df_m$proposer_payoff[df_m$task_failed == 1] <- 1
df_m$proposer_payoff <- as.character(df_m$proposer_payoff)
df_m$ID_payoff <- paste(df_m$prolific_ID, ", ", df_m$proposer_payoff, sep = "")
# export df of proposer_payoffs
proposer_payoff_df <- df_m$ID_payoff
write.csv(proposer_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/proposer payoffs.csv", row.names=F)
names(df_m)
is.na(df_m$prolific_ID)
df_m$prolific_ID[df_m$prolific_ID =="NA"]
df_m$prolific_ID
df_m$prolific_ID[df_m$prolific_ID ==""]
#============================#
#  Proposer Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- tail(df_r, n = 60) # this is just for bots
df_r <- df_r[c("Intro.1.player.treatment","Task.1.player.choice","Task.1.player.proposer_participant_code")]
# randomly select a unique observation per proposer
random_rows <- sample(nrow(df_r))
df_r <- df_r[random_rows,]
df_r <- (df_r[!duplicated(df_r$Task.1.player.proposer_participant_code),])
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.9*3
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.6*3
df_r$proposer_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# match to proposer data
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- tail(df_p, n = 100) # this is just for bots
#subset Prolific ID, offer and merit columns
df_p <- df_p[c("Intro.1.player.ProlificID", "Task.1.player.task_failed", "Offer.1.player.Offer","participant.code")]
names(df_p)<- c("prolific_ID", "task_failed", "offer","Task.1.player.proposer_participant_code")
# merge datasets
df_m <- merge(x = df_p, y = df_r, by = "Task.1.player.proposer_participant_code", all=T)
# replace unmatched receivers's NA payoffs with their offer
df_m$numeric_payoff[df_m$offer == "10%"] <- 0.9*3
df_m$numeric_payoff[df_m$offer == "40%"] <- 0.6*3
df_m$proposer_payoff[is.na(df_m$proposer_payoff)] <- df_m$numeric_payoff[is.na(df_m$proposer_payoff)]
df_m$proposer_payoff[df_m$task_failed == 1] <- 1
df_m$proposer_payoff <- as.character(df_m$proposer_payoff)
df_m$ID_payoff <- paste(df_m$prolific_ID, ", ", df_m$proposer_payoff, sep = "")
df_m <- df_m[df_m$prolific_ID =="",]
df_m <- df_m[df_m$prolific_ID =="ofoghlul",]
# export df of proposer_payoffs
proposer_payoff_df <- df_m$ID_payoff
write.csv(proposer_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/proposer payoffs.csv", row.names=F)
#============================#
#  Proposer Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- tail(df_r, n = 60) # this is just for bots
df_r <- df_r[c("Intro.1.player.treatment","Task.1.player.choice","Task.1.player.proposer_participant_code")]
# randomly select a unique observation per proposer
random_rows <- sample(nrow(df_r))
df_r <- df_r[random_rows,]
df_r <- (df_r[!duplicated(df_r$Task.1.player.proposer_participant_code),])
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.9*3
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.6*3
df_r$proposer_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# match to proposer data
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- tail(df_p, n = 100) # this is just for bots
#subset Prolific ID, offer and merit columns
df_p <- df_p[c("Intro.1.player.ProlificID", "Task.1.player.task_failed", "Offer.1.player.Offer","participant.code")]
names(df_p)<- c("prolific_ID", "task_failed", "offer","Task.1.player.proposer_participant_code")
# merge datasets
df_m <- merge(x = df_p, y = df_r, by = "Task.1.player.proposer_participant_code", all=T)
# replace unmatched receivers's NA payoffs with their offer
df_m$numeric_payoff[df_m$offer == "10%"] <- 0.9*3
df_m$numeric_payoff[df_m$offer == "40%"] <- 0.6*3
df_m$proposer_payoff[is.na(df_m$proposer_payoff)] <- df_m$numeric_payoff[is.na(df_m$proposer_payoff)]
df_m$proposer_payoff[df_m$task_failed == 1] <- 1
df_m$proposer_payoff <- as.character(df_m$proposer_payoff)
df_m$ID_payoff <- paste(df_m$prolific_ID, ", ", df_m$proposer_payoff, sep = "")
df_m <- df_m[df_m$prolific_ID !="",]
df_m <- df_m[df_m$prolific_ID !="ofoghlul",]
# export df of proposer_payoffs
proposer_payoff_df <- df_m$ID_payoff
write.csv(proposer_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/proposer payoffs.csv", row.names=F)
library("pwr")
ES.h(0.5, 0.6)
ES.h(0.45, 0.55)
ES.h(0.57, 0.67)
baseline_i <- 04
baseline_i <- 04
or_i = 1.5
round(baseline_i/(baseline_i + (1/or_i) - (baseline_i/or_i)), 2)
baseline_i <- 0.4
or_i = 1.5
round(baseline_i/(baseline_i + (1/or_i) - (baseline_i/or_i)), 2)
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$prolific_ID !="",]
df_p <- df_p[df_p$prolific_ID !="ofoghlul",]
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$prolific_ID !="",]
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p$prolific_ID
View(df_p)
names(df_p)
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$Intro.1.player.ProlificID !="",]
df_p <- df_p[df_p$Intro.1.player.ProlificID !="ofoghlul",]
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$Intro.1.player.ProlificID !="",]
df_p <- df_p[df_p$Intro.1.player.ProlificID !="ofoghlul",]
library("janitor")
df_p %>% tabyl(Task.1.player.q1)
df_p %>% tabyl(Task.1.player.q2)
names(df_p)
df$Intro.1.player.Merit
df_p$Intro.1.player.Merit
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q2)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q1)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q2)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q3)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q4)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q1)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q2)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q3)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q4)
3^5
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r$Debrief.1.player.comment
df_r$Task.1.player.guess_rationale
df_r$Task.1.player.fairness_rationale
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
names(df_r)
df_r$participant.label
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r$Intro.1.player.ProlificID
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
View(df_r)
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r[df$Intro.1.player.ProlificID != "ttt",]
df_r[df$Intro.1.player.ProlificID != "ttt"]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df_r$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df_r$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r$Intro.1.player.ProlificID
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
View(df_p)
df_p <- df_p[df_p$Intro.1.player.ProlificID != "ofoghlul",] # delete my test run
names(df_p)
df_p <- df_r[df_r$participant.label != "",] # delete non-completes
df_p <- df_r[df_p$participant.label != "",] # delete non-completes
df_p <- df_p[df_p$participant.label != "",] # delete non-completes
df_p <- df_p$participant.label
df_m <- df_p + df_r
df_m <- append(df_p, df_r)
df_m
write.csv(receiver_payoff_df, "C:/Users/William/Istituto Universitario Europeo/Meritocracy/prolific blocklist.csv", row.names=F)
write.csv(df_m, "C:/Users/William/Istituto Universitario Europeo/Meritocracy/prolific blocklist.csv", row.names=F)
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
names(df)
names(df_p)
df_p <- df_p[df_p$Intro.1.player.ProlificID != "ofoghlul",] # delete my test run
df_p <- df_p[df_p$participant.label != "",] # delete non-completes
df_p$Debrief.1.player.total_time_to_completion
12*(20/60) + 12*(15/60) + 8*(25/60)
12*(20/60) + 12*(15/60) + 7*(25/60)
12*(20/60) + 12*(15/60) + 9*(25/60)
12*(20/60) + 12*(15/60) + 10*(25/60)
9
12*(20/60) + 12*(15/60) + 9*(25/60)
12*(20/60) + 12*(30/60) + 9*(10/60)
12*(20/60) + 12*(30/60) + 8*(10/60)
12*(15/60) + 12*(30/60) + 8*(15/60)
12*(15/60) + 24*(30/60) + 8*(15/60)
12*(15/60)
24*(30/60)
8*(15/60)
18*32
720-526
194/(18*2)
18*32
36*3
108+576
(10/100)*(9/99)
(10/50)*(9/49)
1/100
10/(50^2)
(10/50)*(9/49)
(10/50)*(10/50)
(189 - (120*1.05))/(120*1.05))
(189 - (120*1.05))/(120*1.05)
16*3
(2/3)*(38) + (2/5)*(/38)
(2/3)*(38) + (2/5)*(38)
m = 24
(2/3)*(m) + (2/5)*(38-m)
m = 26
(2/3)*(m) + (2/5)*(38-m)
for (m in 1:38) {
w = (2/3)*(m) + (2/5)*(38-m)
print(w)
}
for (m in 1:38) {
w = (2/3)*(m) + (2/5)*(38-m)
print(m, w)
}
for (m in 1:38) {
w = (2/3)*(m) + (2/5)*(38-m)
print(paste(m, w))
}
6*14 + 18*12
8*14 + 16*12
8/24
for (m in 1:38) {
w = (2/3)*(m) + (2/5)*(38-m)
print(paste(m, w))
}
12*24
24/6
14*8
8*14 + 16*12
53/4
52/4
(1/11)*(1/10)
6/63
6/7 + 1/9
1/63
1/7 + 1/9
12*(15/60) + 24*(30/60) + 8*(15/60)
6/63
209 - (120*1.05 + 10)
73/120
(210 - (120*1.05 + 10))/120
(212 - (120*1.05 + 10))/120
(213 - (120*1.05 + 10))/120
(214 - (120*1.05 + 10))/120
for (m in 1:38) {
w = (2/3)*(m) + (2/5)*(38-m)
print(paste(m, w))
}
for (match in 1:38) {
win = (2/3)*(m) + (2/5)*(38-m)
print(paste("match", match, "win", w))
}
for (match in 1:38) {
win = (2/3)*(match) + (2/5)*(38-match)
print(paste("match", match, "win", w))
}
for (match in 1:38) {
win = (2/3)*(match) + (2/5)*(38-match)
print(paste("match", match, "win", win))
}
120/5
15*5
80/5
240/5
0.2*0.2
40*5
45*5
200/60
220/60
40*5
35*5
#=============================
#  GenNet - Generate referrer_component_df
#=============================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Experimental Administration/")
df <- read.csv("performers, female, 3 april 1712.csv")
df <- df[df$performer_intro.1.player.ProlificID != "ofoghlul",]
df <- df[df$performer_intro.1.player.ProlificID != "",]
names(df)
performer_task_order
df$performer_task_order
df$participant.performer_task_order
df$childcare_score_round1 <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 2]
df$childcare_score_round1 <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 1]
df$childcare_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 2]
df$childcare_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 1]
df$childcare_score_round1
df$participant.code[df$childcare_score_round1 == 0]
View(df)
df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 2][df$childcare_score_round1 == 0]
df$performer_task.2.player.correct_answers[df$participant.performer_task_order == 2][df$childcare_score_round1 == 0]
df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 2][df$childcare_score_round1 == 0]
df$performer_task.4.player.correct_answers[df$participant.performer_task_order == 2][df$childcare_score_round1 == 0]
df$performer_task.4.player.correct_answers[df$childcare_score_round1 == 0]
df$performer_task.3.player.correct_answers[df$childcare_score_round1 == 0]
df$performer_task.2.player.correct_answers[df$childcare_score_round1 == 0]
df$performer_task.1.player.correct_answers[df$childcare_score_round1 == 0]
df$maths_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 2]
hist(df$maths_score_round1)
table(df$maths_score_round1)
names(df)
# merge with demographics
df_demo <- read.csv("performers, female, 3 april, demographics.csv")
names(df_demo)
df)demo$particiapnt_id
df$demo$particiapnt_id
df_demo$particiapnt_id
df_demo$participant_id
names(df)
naems(df_demo)
names(df_demo)
names(df_demo)[2] <- "participant.label"
df <- merge(df, df_demo, by = "participant.label")
df$age
names(df_demo)
names(df)
nrwo(df)
nrows(df)
nrow(df)
df$performer_age <- round(runif(nrow(df),24,29)) ## NB! just for demo
table(df$performer_age)
# childcare_df
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "maths_score_round1")]
# childcare_df
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "maths_score_round1"),]
# childcare_df
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "childcare_score_round1"),]
# childcare_df
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "childcare_score_round1")]
names(df)[2] <- "performer_participant_code"
names(df)[177] <- "performer_name"
names(df)[189] <- "performer_age"
# childcare_df
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "childcare_score_round1")]
maths_df <- df[c("performer_participant_code", "performer_name", "performer_age", "maths_score_round1")]
names(childcare_df)
names(maths_df)[4] <- "performer_score"
head(maths_df)
head(df)
names(df)
#=============================
#  GenNet - Generate referrer_component_df
#=============================
## NB! just for demo I generated fake age
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Experimental Administration/")
df <- read.csv("performers, female, 3 april 1712.csv")
df <- df[df$performer_intro.1.player.ProlificID != "ofoghlul",]
df <- df[df$performer_intro.1.player.ProlificID != "",]
# merge with demographics
df_demo <- read.csv("performers, female, 3 april, demographics.csv")
names(df_demo)[2] <- "participant.label"
df <- merge(df, df_demo, by = "participant.label")
# childcare and maths variables
df$childcare_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 2]
df$childcare_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 2]
# clean data
names(df)[3] <- "performer_participant_code"
names(df)[177] <- "performer_name"
names(df)[189] <- "performer_age"
df$performer_age <- round(runif(nrow(df),24,29)) ## NB! just for demo
# split dfs
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "childcare_score_round1")]
maths_df <- df[c("performer_participant_code", "performer_name", "performer_age", "maths_score_round1")]
names(childcare_df)[4] <- "performer_score"
names(maths_df)[4] <- "performer_score"
head(childcare_df)
#=============================
#  GenNet - Generate referrer_component_df
#=============================
## NB! just for demo I generated fake age
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Experimental Administration/")
df <- read.csv("performers, female, 3 april 1712.csv")
df <- df[df$performer_intro.1.player.ProlificID != "ofoghlul",]
df <- df[df$performer_intro.1.player.ProlificID != "",]
# merge with demographics
df_demo <- read.csv("performers, female, 3 april, demographics.csv")
names(df_demo)[2] <- "participant.label"
df <- merge(df, df_demo, by = "participant.label")
# childcare and maths variables
df$childcare_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 2]
df$childcare_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 2]
# clean data
names(df)[3] <- "performer_participant_code"
names(df)[177] <- "performer_name"
names(df)[189] <- "performer_age"
df$performer_age <- round(runif(nrow(df),24,29)) ## NB! just for demo
# split dfs
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "childcare_score_round1")]
maths_df <- df[c("performer_participant_code", "performer_name", "performer_age", "maths_score_round1")]
names(childcare_df)[4] <- "performer_score"
names(maths_df)[4] <- "performer_score"
write.csv(maths_df,"performer_df_maths.csv", row.names=F)
write.csv(childcare_df,"performer_df_childcare.csv", row.names=F)
#=============================
#  GenNet - Generate referrer_component_df
#=============================
## NB! just for demo I generated fake age
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Experimental Administration/")
df <- read.csv("performers, female, 3 april 1712.csv")
df <- df[df$performer_intro.1.player.ProlificID != "ofoghlul",]
df <- df[df$performer_intro.1.player.ProlificID != "",]
# merge with demographics
df_demo <- read.csv("performers, female, 3 april, demographics.csv")
names(df_demo)[2] <- "participant.label"
df <- merge(df, df_demo, by = "participant.label")
# childcare and maths variables
df$childcare_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 2]
df$childcare_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 1] <- df$performer_task.1.player.correct_answers[df$participant.performer_task_order == 1]
df$maths_score_round1[df$participant.performer_task_order == 2] <- df$performer_task.3.player.correct_answers[df$participant.performer_task_order == 2]
# clean data
names(df)[3] <- "performer_participant_code"
names(df)[177] <- "performer_name"
names(df)[189] <- "performer_age"
df$performer_age <- round(runif(nrow(df),24,29)) ## NB! just for demo
# split dfs
childcare_df <- df[c("performer_participant_code", "performer_name", "performer_age", "childcare_score_round1")]
maths_df <- df[c("performer_participant_code", "performer_name", "performer_age", "maths_score_round1")]
names(childcare_df)[4] <- "performer_score"
names(maths_df)[4] <- "performer_score"
# write to application
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
write.csv(maths_df,"performer_df_maths.csv", row.names=F)
write.csv(childcare_df,"performer_df_childcare.csv", row.names=F)
table(df$performer_age)
table(df$performer_name)
