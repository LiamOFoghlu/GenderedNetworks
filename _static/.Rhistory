#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120.csv")
df <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess")]
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$receiver_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.1*3
df_r$receiver_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.4*3
df_r$receiver_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# guess
df_r$guess_correct <- 0
df_r$guess_correct[df_r$Task.1.player.proposer_merit == "earner" & df_r$Task.1.player.guess == "They drew a Task ball, and earned the money."] <- 1
df_r$guess_correct[df_r$Task.1.player.proposer_merit == "non-earner" & df_r$Task.1.player.guess == "They drew a No-task ball, and were gifted the money."] <- 1
df_r$receiver_payoff <- df_r$receiver_payoff + df_r$guess_correct
# total cost
receiver_payment <- df_r$receiver_payof + 2.5
paste("Total cost of receiver component, incl Prolific: ", "£", round(sum(receiver_payment)*1.3333, 2), sep="")
# export IDs and payoffs
df_r$ID_payoff <- paste(df_r$Intro.1.player.ProlificID, ", ", df_r$receiver_payoff, sep = "")
receiver_payoff_df <- df_r$ID_payoff
write.csv(receiver_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/receiver payoffs.csv", row.names=F)
df <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120.csv")
df <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess")]
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess")]
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$receiver_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.1*3
df_r$receiver_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.4*3
df_r$receiver_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# guess
df_r$guess_correct <- 0
df_r$guess_correct[df_r$Task.1.player.proposer_merit == "earner" & df_r$Task.1.player.guess == "They drew a Task ball, and earned the money."] <- 1
df_r$guess_correct[df_r$Task.1.player.proposer_merit == "non-earner" & df_r$Task.1.player.guess == "They drew a No-task ball, and were gifted the money."] <- 1
df_r$receiver_payoff <- df_r$receiver_payoff + df_r$guess_correct
# total cost
receiver_payment <- df_r$receiver_payof + 2.5
paste("Total cost of receiver component, incl Prolific: ", "£", round(sum(receiver_payment)*1.3333, 2), sep="")
# export IDs and payoffs
df_r$ID_payoff <- paste(df_r$Intro.1.player.ProlificID, ", ", df_r$receiver_payoff, sep = "")
receiver_payoff_df <- df_r$ID_payoff
write.csv(receiver_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/receiver payoffs.csv", row.names=F)
View(df_r)
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess")]
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$receiver_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.1*3
df_r$receiver_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.4*3
df_r$receiver_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# guess
df_r$guess_correct <- 0
df_r$guess_correct[df_r$Task.1.player.proposer_merit == "earner" & df_r$Task.1.player.guess == "They drew a Task ball, and earned the money."] <- 1
df_r$guess_correct[df_r$Task.1.player.proposer_merit == "non-earner" & df_r$Task.1.player.guess == "They drew a No-task ball, and were gifted the money."] <- 1
df_r$receiver_payoff <- df_r$receiver_payoff + df_r$guess_correct
# total cost
receiver_payment <- df_r$receiver_payof + 2.5
paste("Total cost of receiver component, incl Prolific: ", "£", round(sum(receiver_payment)*1.3333, 2), sep="")
# export IDs and payoffs
df_r$ID_payoff <- paste(df_r$Intro.1.player.ProlificID, ", ", df_r$receiver_payoff, sep = "")
receiver_payoff_df <- df_r$ID_payoff
write.csv(receiver_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/receiver payoffs.csv", row.names=F)
View(df_r)
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
#============================#
#  Receiver Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r$unfair
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df$Intro.1.player.ProlificID != "",] # delete non-completes
df$unfair
df_r$unfair
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r$unfair
library("janitor)")
library("janitor")
df_r[df_r$Intro.1.player.treatment == "HN"] %>% tabyl(unfair)
df_r[df_r$Intro.1.player.treatment == "HN",] %>% tabyl(unfair)
df_r[df_r$Intro.1.player.treatment == "HC",] %>% tabyl(unfair)
df_r <- df_r[c("Intro.1.player.ProlificID", "Intro.1.player.treatment", "Task.1.player.choice", "Task.1.player.proposer_merit","Task.1.player.guess","unfair")]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
#============================#
#  Proposer Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- tail(df_r, n = 60) # this is just for bots
df_r <- df_r[c("Intro.1.player.treatment","Task.1.player.choice","Task.1.player.proposer_participant_code")]
# randomly select a unique observation per proposer
random_rows <- sample(nrow(df_r))
df_r <- df_r[random_rows,]
df_r <- (df_r[!duplicated(df_r$Task.1.player.proposer_participant_code),])
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.9*3
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.6*3
df_r$proposer_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# match to proposer data
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- tail(df_p, n = 100) # this is just for bots
#subset Prolific ID, offer and merit columns
df_p <- df_p[c("Intro.1.player.ProlificID", "Task.1.player.task_failed", "Offer.1.player.Offer","participant.code")]
names(df_p)<- c("prolific_ID", "task_failed", "offer","Task.1.player.proposer_participant_code")
# merge datasets
df_m <- merge(x = df_p, y = df_r, by = "Task.1.player.proposer_participant_code", all=T)
# replace unmatched receivers's NA payoffs with their offer
df_m$numeric_payoff[df_m$offer == "10%"] <- 0.9*3
df_m$numeric_payoff[df_m$offer == "40%"] <- 0.6*3
df_m$proposer_payoff[is.na(df_m$proposer_payoff)] <- df_m$numeric_payoff[is.na(df_m$proposer_payoff)]
df_m$proposer_payoff[df_m$task_failed == 1] <- 1
df_m$proposer_payoff <- as.character(df_m$proposer_payoff)
df_m$ID_payoff <- paste(df_m$prolific_ID, ", ", df_m$proposer_payoff, sep = "")
# export df of proposer_payoffs
proposer_payoff_df <- df_m$ID_payoff
write.csv(proposer_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/proposer payoffs.csv", row.names=F)
names(df_m)
is.na(df_m$prolific_ID)
df_m$prolific_ID[df_m$prolific_ID =="NA"]
df_m$prolific_ID
df_m$prolific_ID[df_m$prolific_ID ==""]
#============================#
#  Proposer Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- tail(df_r, n = 60) # this is just for bots
df_r <- df_r[c("Intro.1.player.treatment","Task.1.player.choice","Task.1.player.proposer_participant_code")]
# randomly select a unique observation per proposer
random_rows <- sample(nrow(df_r))
df_r <- df_r[random_rows,]
df_r <- (df_r[!duplicated(df_r$Task.1.player.proposer_participant_code),])
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.9*3
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.6*3
df_r$proposer_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# match to proposer data
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- tail(df_p, n = 100) # this is just for bots
#subset Prolific ID, offer and merit columns
df_p <- df_p[c("Intro.1.player.ProlificID", "Task.1.player.task_failed", "Offer.1.player.Offer","participant.code")]
names(df_p)<- c("prolific_ID", "task_failed", "offer","Task.1.player.proposer_participant_code")
# merge datasets
df_m <- merge(x = df_p, y = df_r, by = "Task.1.player.proposer_participant_code", all=T)
# replace unmatched receivers's NA payoffs with their offer
df_m$numeric_payoff[df_m$offer == "10%"] <- 0.9*3
df_m$numeric_payoff[df_m$offer == "40%"] <- 0.6*3
df_m$proposer_payoff[is.na(df_m$proposer_payoff)] <- df_m$numeric_payoff[is.na(df_m$proposer_payoff)]
df_m$proposer_payoff[df_m$task_failed == 1] <- 1
df_m$proposer_payoff <- as.character(df_m$proposer_payoff)
df_m$ID_payoff <- paste(df_m$prolific_ID, ", ", df_m$proposer_payoff, sep = "")
df_m <- df_m[df_m$prolific_ID =="",]
df_m <- df_m[df_m$prolific_ID =="ofoghlul",]
# export df of proposer_payoffs
proposer_payoff_df <- df_m$ID_payoff
write.csv(proposer_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/proposer payoffs.csv", row.names=F)
#============================#
#  Proposer Payoff           #
#============================#
# Get receiver data, keep relevant variables
# NB! Need to use rbind() to connect male and female dataframes
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- tail(df_r, n = 60) # this is just for bots
df_r <- df_r[c("Intro.1.player.treatment","Task.1.player.choice","Task.1.player.proposer_participant_code")]
# randomly select a unique observation per proposer
random_rows <- sample(nrow(df_r))
df_r <- df_r[random_rows,]
df_r <- (df_r[!duplicated(df_r$Task.1.player.proposer_participant_code),])
# calculate payoffs - if reject, then zero. Otherwise, offer.
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "HN" | df_r$Intro.1.player.treatment == "HC"] <- 0.9*3
df_r$proposer_payoff[df_r$Intro.1.player.treatment == "LN" | df_r$Intro.1.player.treatment == "LC"] <- 0.6*3
df_r$proposer_payoff[df_r$Task.1.player.choice == "Reject"] <- 0
# match to proposer data
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- tail(df_p, n = 100) # this is just for bots
#subset Prolific ID, offer and merit columns
df_p <- df_p[c("Intro.1.player.ProlificID", "Task.1.player.task_failed", "Offer.1.player.Offer","participant.code")]
names(df_p)<- c("prolific_ID", "task_failed", "offer","Task.1.player.proposer_participant_code")
# merge datasets
df_m <- merge(x = df_p, y = df_r, by = "Task.1.player.proposer_participant_code", all=T)
# replace unmatched receivers's NA payoffs with their offer
df_m$numeric_payoff[df_m$offer == "10%"] <- 0.9*3
df_m$numeric_payoff[df_m$offer == "40%"] <- 0.6*3
df_m$proposer_payoff[is.na(df_m$proposer_payoff)] <- df_m$numeric_payoff[is.na(df_m$proposer_payoff)]
df_m$proposer_payoff[df_m$task_failed == 1] <- 1
df_m$proposer_payoff <- as.character(df_m$proposer_payoff)
df_m$ID_payoff <- paste(df_m$prolific_ID, ", ", df_m$proposer_payoff, sep = "")
df_m <- df_m[df_m$prolific_ID !="",]
df_m <- df_m[df_m$prolific_ID !="ofoghlul",]
# export df of proposer_payoffs
proposer_payoff_df <- df_m$ID_payoff
write.csv(proposer_payoff_df, "C:/Users/William/Dropbox/PhD/Meritocracy/Experimental administration/proposer payoffs.csv", row.names=F)
library("pwr")
ES.h(0.5, 0.6)
ES.h(0.45, 0.55)
ES.h(0.57, 0.67)
baseline_i <- 04
baseline_i <- 04
or_i = 1.5
round(baseline_i/(baseline_i + (1/or_i) - (baseline_i/or_i)), 2)
baseline_i <- 0.4
or_i = 1.5
round(baseline_i/(baseline_i + (1/or_i) - (baseline_i/or_i)), 2)
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$prolific_ID !="",]
df_p <- df_p[df_p$prolific_ID !="ofoghlul",]
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$prolific_ID !="",]
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p$prolific_ID
View(df_p)
names(df_p)
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$Intro.1.player.ProlificID !="",]
df_p <- df_p[df_p$Intro.1.player.ProlificID !="ofoghlul",]
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
df_p <- df_p[df_p$Intro.1.player.ProlificID !="",]
df_p <- df_p[df_p$Intro.1.player.ProlificID !="ofoghlul",]
library("janitor")
df_p %>% tabyl(Task.1.player.q1)
df_p %>% tabyl(Task.1.player.q2)
names(df_p)
df$Intro.1.player.Merit
df_p$Intro.1.player.Merit
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q2)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q1)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q2)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q3)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q4)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q1)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q2)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q3)
df_p[df_p$Intro.1.player.Merit == "earner",] %>% tabyl(Task.1.player.q4)
3^5
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r$Debrief.1.player.comment
df_r$Task.1.player.guess_rationale
df_r$Task.1.player.fairness_rationale
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
names(df_r)
df_r$participant.label
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r$Intro.1.player.ProlificID
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
View(df_r)
df_r <- df_r[df$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r[df$Intro.1.player.ProlificID != "ttt",]
df_r[df$Intro.1.player.ProlificID != "ttt"]
df_r <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Receiver - Pilot 25.03.22, 2120 - edit.csv")
df_r <- df_r[df_r$Intro.1.player.ProlificID != "ttt",] # delete my test run
df_r <- df_r[df_r$Intro.1.player.ProlificID != "",] # delete non-completes
df_r <- df_r$Intro.1.player.ProlificID
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
View(df_p)
df_p <- df_p[df_p$Intro.1.player.ProlificID != "ofoghlul",] # delete my test run
names(df_p)
df_p <- df_r[df_r$participant.label != "",] # delete non-completes
df_p <- df_r[df_p$participant.label != "",] # delete non-completes
df_p <- df_p[df_p$participant.label != "",] # delete non-completes
df_p <- df_p$participant.label
df_m <- df_p + df_r
df_m <- append(df_p, df_r)
df_m
write.csv(receiver_payoff_df, "C:/Users/William/Istituto Universitario Europeo/Meritocracy/prolific blocklist.csv", row.names=F)
write.csv(df_m, "C:/Users/William/Istituto Universitario Europeo/Meritocracy/prolific blocklist.csv", row.names=F)
df_p <- read.csv("C:/Users/William/Istituto Universitario Europeo/Meritocracy/Proposer Component - 25.03.22, 15h31.csv")
names(df)
names(df_p)
df_p <- df_p[df_p$Intro.1.player.ProlificID != "ofoghlul",] # delete my test run
df_p <- df_p[df_p$participant.label != "",] # delete non-completes
df_p$Debrief.1.player.total_time_to_completion
# =========================================
#
#   Generate fake data for employer task
#
# =========================================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
# there are (for now) four variables: gender, referrer, education, age
N <- 60
german_name_list = c("Ben", "Paul", "Elias", "Stefan", "Lennart", "Rudolph", "Johannes", "Ellen", "Franziska", "Anica", "Meena", "Angela", "Elke", "Cristina")
candidate_name <- c(sample (german_name_list, N, replace = T))
referrer_name <- c(sample (german_name_list, N, replace = T))
for (i in 1:length(referrer_name)) {
roll_dice = sample(c(1:6), size = 1)
if (roll_dice < 3) {
referrer_name[i] = "No referral"
}
}
candidate_age <- round(runif(N,24,29))
candidate_score <- sample(c(1:5), N, replace = TRUE)
profile_pos <- c()
for (i in 1:N) {
profile_pos <- append(profile_pos, i%%2 + 1)
}
referrals_df <- data.frame(
candidate_name,
referrer_name,
age,
score,
profile_pos
)
referrals_df$id = ceiling((1:nrow(referrals_df))/2)
referrals_df$profile_pos[referrals_df$profile_pos == 2] = "a"
referrals_df$profile_pos[referrals_df$profile_pos == 1] = "b"
# reshape
referrals_df <- reshape(referrals_df,
timevar = "profile_pos",
idvar = "id",
direction = "wide")
# save
write.csv(referrals_df,"referrals_df_maths.csv", row.names=F)
write.csv(referrals_df,"referrals_df_childcare.csv", row.names=F)
# =========================================
#
#   Generate fake data for referral task
#
# =========================================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
# there are (for now) four variables: gender, score, education, age
N <- 30
german_name_list = c("Ben", "Paul", "Elias", "Stefan", "Lennart", "Rudolph", "Johannes", "Ellen", "Franziska", "Anica", "Meena", "Angela", "Elke", "Cristina")
candidate_name <- c(sample (german_name_list, N, replace = T))
candidate_score <- sample(c(1:5), N, replace = TRUE)
candidate_age <- round(runif(N,24,29))
candidate_df <- data.frame(
candidate_name,
candidate_score,
candidate_age
)
write.csv(candidate_df,"candidate_df_maths.csv", row.names=F) # note: same (fake) dataset for both tasks
write.csv(candidate_df,"candidate_df_childcare.csv", row.names=F)
# =========================================
#
#   Generate fake data for employer task
#
# =========================================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
# there are (for now) four variables: gender, referrer, education, age
N <- 60
german_name_list = c("Ben", "Paul", "Elias", "Stefan", "Lennart", "Rudolph", "Johannes", "Ellen", "Franziska", "Anica", "Meena", "Angela", "Elke", "Cristina")
candidate_name <- c(sample (german_name_list, N, replace = T))
referrer_name <- c(sample (german_name_list, N, replace = T))
for (i in 1:length(referrer_name)) {
roll_dice = sample(c(1:6), size = 1)
if (roll_dice < 3) {
referrer_name[i] = "No referral"
}
}
candidate_age <- round(runif(N,24,29))
candidate_score <- sample(c(1:5), N, replace = TRUE)
profile_pos <- c()
for (i in 1:N) {
profile_pos <- append(profile_pos, i%%2 + 1)
}
referrals_df <- data.frame(
candidate_name,
referrer_name,
candidate_age,
candidate_score,
profile_pos
)
referrals_df$id = ceiling((1:nrow(referrals_df))/2)
referrals_df$profile_pos[referrals_df$profile_pos == 2] = "a"
referrals_df$profile_pos[referrals_df$profile_pos == 1] = "b"
# reshape
referrals_df <- reshape(referrals_df,
timevar = "profile_pos",
idvar = "id",
direction = "wide")
# save
write.csv(referrals_df,"referrals_df_maths.csv", row.names=F)
write.csv(referrals_df,"referrals_df_childcare.csv", row.names=F)
# =========================================
#
#   Generate fake data for referral task
#
# =========================================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
# there are (for now) four variables: gender, score, education, age
N <- 30
name_list = c("Rebecca", "Jessica", "Hannah", "Amy", "Megan", "Chloe", "Lucy",
"Bethany", "Thomas", "Jack", "Matthew", "Joshua", "Samuel", "Adam",
"Alexander", "Benjamin")
candidate_name <- c(sample (name_list, N, replace = T))
candidate_score <- sample(c(1:5), N, replace = TRUE)
candidate_age <- round(runif(N,24,29))
candidate_df <- data.frame(
candidate_name,
candidate_score,
candidate_age
)
write.csv(candidate_df,"candidate_df_maths.csv", row.names=F) # note: same (fake) dataset for both tasks
write.csv(candidate_df,"candidate_df_childcare.csv", row.names=F)
# =========================================
#
#   Generate fake data for employer task
#
# =========================================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
# there are (for now) four variables: gender, referrer, education, age
N <- 60
candidate_name_list = c("Rebecca", "Jessica", "Hannah", "Amy", "Megan", "Chloe", "Lucy",
"Bethany", "Thomas", "Jack", "Matthew", "Joshua", "Samuel", "Adam",
"Alexander", "Benjamin")
referrer_name_list = c("James", "Daniel", "Ryan", "Luke", "Jordan", "Michael",
"Christopher", "Joseph", "Lauren", "Charlotte", "Sophie",
"Emily", "Sarah", "Katie", "Jade", "Alice")
candidate_name <- c(sample (candidate_name_list, N, replace = T))
referrer_name <- c(sample (referrer_name_list, N, replace = T))
for (i in 1:length(referrer_name)) {
roll_dice = sample(c(1:6), size = 1)
if (roll_dice < 3) {
referrer_name[i] = "No referral"
}
}
candidate_age <- round(runif(N,24,29))
candidate_score <- sample(c(1:5), N, replace = TRUE)
profile_pos <- c()
for (i in 1:N) {
profile_pos <- append(profile_pos, i%%2 + 1)
}
referrals_df <- data.frame(
candidate_name,
referrer_name,
candidate_age,
candidate_score,
profile_pos
)
referrals_df$id = ceiling((1:nrow(referrals_df))/2)
referrals_df$profile_pos[referrals_df$profile_pos == 2] = "a"
referrals_df$profile_pos[referrals_df$profile_pos == 1] = "b"
# reshape
referrals_df <- reshape(referrals_df,
timevar = "profile_pos",
idvar = "id",
direction = "wide")
# save
write.csv(referrals_df,"referrals_df_maths.csv", row.names=F)
write.csv(referrals_df,"referrals_df_childcare.csv", row.names=F)
# =========================================
#
#   Generate fake data for referral task
#
# =========================================
setwd("C:/Users/William/Dropbox/PhD/Gendered Networks/Applications/all_components/_static")
# there are (for now) four variables: gender, score, education, age
N <- 30
name_list = c("Rebecca", "Jessica", "Hannah", "Amy", "Megan", "Chloe", "Lucy",
"Bethany", "Thomas", "Jack", "Matthew", "Joshua", "Samuel", "Adam",
"Alexander", "Benjamin")
candidate_name <- c(sample (name_list, N, replace = T))
candidate_score <- sample(c(1:5), N, replace = TRUE)
candidate_age <- round(runif(N,24,29))
candidate_df <- data.frame(
candidate_name,
candidate_score,
candidate_age
)
write.csv(candidate_df,"candidate_df_maths.csv", row.names=F) # note: same (fake) dataset for both tasks
write.csv(candidate_df,"candidate_df_childcare.csv", row.names=F)
